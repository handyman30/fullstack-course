// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User and Authentication
model User {
  id            String    @id @default(cuid())
  email         String    @unique
  emailVerified DateTime?
  name          String?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // Relations
  accounts      Account[]
  sessions      Session[]
  subscription  Subscription?
  progress      Progress[]
  certificates  Certificate[]
  
  @@index([email])
}

// OAuth Accounts
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([provider, providerAccountId])
  @@index([userId])
}

// Sessions
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
}

// Subscription Management
model Subscription {
  id               String   @id @default(cuid())
  userId           String   @unique
  
  // PayPal fields (deprecated, kept for migration)
  paypalSubscriptionId String? @unique
  
  // Stripe fields
  stripeSubscriptionId String? @unique
  stripeCustomerId     String?
  
  status           SubscriptionStatus @default(TRIAL)
  currentPeriodStart DateTime @default(now())
  currentPeriodEnd DateTime
  trialEndsAt      DateTime?
  canceledAt       DateTime?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  payments Payment[]
  
  @@index([status])
  @@index([paypalSubscriptionId])
  @@index([stripeSubscriptionId])
  @@index([stripeCustomerId])
}

enum SubscriptionStatus {
  ACTIVE
  PENDING
  TRIALING
  TRIAL
  CANCELLED
  EXPIRED
  SUSPENDED
}

// Payment Records
model Payment {
  id              String   @id @default(cuid())
  subscriptionId  String
  paypalPaymentId String   @unique
  amount          Float
  currency        String   @default("USD")
  status          PaymentStatus
  paidAt          DateTime
  createdAt       DateTime @default(now())
  
  subscription Subscription @relation(fields: [subscriptionId], references: [id])
  
  @@index([subscriptionId])
  @@index([paypalPaymentId])
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

// Course Structure
model Module {
  id          String   @id @default(cuid())
  order       Int
  title       String
  description String
  icon        String?
  color       String?
  
  lessons     Lesson[]
  
  @@index([order])
}

model Lesson {
  id          String   @id @default(cuid())
  moduleId    String
  order       Int
  title       String
  description String?
  duration    String
  videoUrl    String?
  isFree      Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  module      Module   @relation(fields: [moduleId], references: [id])
  progress    Progress[]
  
  @@index([moduleId, order])
}

// Progress Tracking
model Progress {
  id          String   @id @default(cuid())
  userId      String
  lessonId    String
  completed   Boolean  @default(false)
  completedAt DateTime?
  watchTime   Int      @default(0) // in seconds
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  lesson      Lesson   @relation(fields: [lessonId], references: [id])
  
  @@unique([userId, lessonId])
  @@index([userId])
  @@index([lessonId])
}

// Certificates
model Certificate {
  id          String   @id @default(cuid())
  userId      String
  courseTitle String   @default("Full-Stack Development")
  issuedAt    DateTime @default(now())
  certificateUrl String?
  
  user        User     @relation(fields: [userId], references: [id])
  
  @@index([userId])
}
